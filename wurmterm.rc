[ -f ~/.bashrc ] && . ~/.bashrc

AGENT_CODE='
use IO::Socket::UNIX qw( SOCK_STREAM SOMAXCONN );
$| = 1;
my $sp = "/tmp/wt.sock";
unlink($sp);
my $l = IO::Socket::UNIX->new(
   Type   => SOCK_STREAM,
   Local  => $sp,
   Listen => SOMAXCONN,
) or die $!;

sub h { $l->close(); exit(0); };
$SIG{HUP} = \&h;
$SIG{PIPE} = \&h;
$SIG{INT} = \&h;
$SIG{TERM} = \&h;

while(1) {
my $s = $l->accept();
my $line;
while($line = <$s>) {
  my $d = `($line) 2>/dev/null`;
  $d =~ s/\"//g;
  $d =~ s#[\r\n]+#\\n#g;
  print $s "{ \"s\": $?, \"d\": \"$d\" }\nEND\n";
}}'

# Setup SSH alias
ssh() {
   if [ "$WT_INSTANCE" == "" ]; then
      echo "Fatal: no WT_INSTANCE env var passed!"
   fi

   # FIXME: Permissions?
   [ -d ~/.wurmterm ] || mkdir ~/.wurmterm
   [ -d ~/.wurmterm/hosts ] || mkdir ~/.wurmterm/hosts

   # FIXME: check for non-trivial ssh that we do not want
   # to intercept. Check content of $@

   local_socket=$(readlink -f ~/.wurmterm/hosts/"${WT_INSTANCE}".sock)
   [ -a $local_socket ] && rm "$local_socket"
   /usr/bin/ssh -t -L $local_socket:/tmp/wt.sock "$@" " (LC_ALL=C /usr/bin/perl -w -e '$AGENT_CODE' &);bash -l"
   rm $local_socket
}
